
# generator : 输入层维数：128（特征维数）+20（噪声维数）   隐层数：256  输出层：128
# subsititude detector: 128 - 256 - 1

from keras.layers import Input, Dense, Activation
from keras.layers.merge import Maximum, Concatenate
from keras.models import Model
from keras.optimizers import Adam
# from keras.optimizers import adam_v2
from sklearn.ensemble import RandomForestClassifier
from sklearn.neural_network import MLPClassifier
from sklearn import linear_model, svm, tree
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
import numpy as np
from numpy.core.umath_tests import inner1d
from VOTEClassifier import VOTEClassifier
import pandas as pd
import datasets
from filllist import fill_list


class MalGAN():
    # blackbox:MLP
    def __init__(self, blackbox='RF', same_train_data=1, filename='data.npz'):
        # 输入特征维度
        self.apifeature_dims = 135
        # 输入噪声维度
        self.z_dims = 20
        # 隐层节点数
        self.hide_layers = 256
        # 生成器[148,256,128]
        self.generator_layers = [self.apifeature_dims+self.z_dims, self.hide_layers, self.apifeature_dims]
        # 替代检测器[128,256,1]
        self.substitute_detector_layers = [self.apifeature_dims, self.hide_layers, 1]
        # blackbox:MLP
        self.blackbox = blackbox       # RF LR DT SVM MLP VOTE
        # 是否用相同训练集 1表示使用相同的训练集 0表示使用不同的训练集
        self.same_train_data = same_train_data   # MalGAN and the black-boxdetector are trained on same or different training sets
        optimizer = Adam(lr=0.001)
        # 数据文件名
        self.filename = filename

        # Build and Train blackbox_detector
        self.blackbox_detector = self.build_blackbox_detector()

        # Build and compile the substitute_detector
        self.substitute_detector = self.build_substitute_detector()
        self.substitute_detector.compile(loss='binary_crossentropy', optimizer=optimizer, metrics=['accuracy'])

        # Build the generator
        self.generator = self.build_generator()

        # The generator takes malware and noise as input and generates adversarial malware examples
        # 128
        example = Input(shape=(self.apifeature_dims,))
        # 20
        noise = Input(shape=(self.z_dims,))
        # input 148
        input = [example, noise]
        malware_examples = self.generator(input)

        # For the combined model we will only train the generator
        # 控制生成器，训练替代检测器
        self.substitute_detector.trainable = False

        # The discriminator takes generated images as input and determines validity
        validity = self.substitute_detector(malware_examples)

        # The combined model  (stacked generator and substitute_detector)
        # Trains the generator to fool the discriminator
        self.combined = Model(input, validity)
        self.combined.compile(loss='binary_crossentropy', optimizer=optimizer)

    def build_blackbox_detector(self):

        if self.blackbox is 'RF':
            blackbox_detector = RandomForestClassifier(n_estimators=100, max_depth=3, random_state=1)
        elif self.blackbox is 'SVM':
            blackbox_detector = svm.SVC()
        elif self.blackbox is 'LR':
            blackbox_detector = linear_model.LogisticRegression()
        elif self.blackbox is 'DT':
            blackbox_detector = tree.DecisionTreeRegressor()
        elif self.blackbox is 'MLP':
            blackbox_detector = MLPClassifier(hidden_layer_sizes=(50,), max_iter=10, alpha=1e-4,
                                              solver='sgd', verbose=0, tol=1e-4, random_state=1,
                                              learning_rate_init=.1)
        elif self.blackbox is 'VOTE':
            blackbox_detector = VOTEClassifier()

        return blackbox_detector

    def build_generator(self):
        # 128
        example = Input(shape=(self.apifeature_dims,))
        # 20
        noise = Input(shape=(self.z_dims,))
        # 128+20
        x = Concatenate(axis=1)([example, noise])
        # 生成器[148,256,128]
        for dim in self.generator_layers[1:]:
            x = Dense(dim)(x)
        x = Activation(activation='sigmoid')(x)
        x = Maximum()([example, x])
        generator = Model([example, noise], x, name='generator')
        generator.summary()
        return generator

    def build_substitute_detector(self):
        # 替代检测器[128,256,1]  输入128
        input = Input(shape=(self.substitute_detector_layers[0],))
        x = input
        for dim in self.substitute_detector_layers[1:]:
            x = Dense(dim)(x)
        x = Activation(activation='sigmoid')(x)
        substitute_detector = Model(input, x, name='substitute_detector')
        substitute_detector.summary()
        return substitute_detector
    # 1.
    def load_data(self):
        # 加载data.npz文件
        # data = np.load(self.filename)
        # print(data)
        # xmal, ymal, xben, yben = data['xmal'], data['ymal'], data['xben'], data['yben']
        # print('this is xmal.shape:',np.array(xmal).shape)
        # print('this is ymal.shape:',np.array(ymal).shape)
        # print('this is xben.shape:',np.array(xben).shape)
        # print('this is yben.shape:',np.array(yben).shape)
        xben, yben, benfile_names = datasets.csv2numpy(r'I:\论文\文档型\PDF\代码\Malware-GAN\testdata\contagio-ben.csv')
        xmal, ymal, malfile_names = datasets.csv2numpy(r'I:\论文\文档型\PDF\代码\Malware-GAN\testdata\virustotal-mal.csv')

        print('this is xmal.shape:',np.array(xmal).shape)
        print('this is ymal.shape:',np.array(ymal).shape)
        print('this is xben.shape:',np.array(xben).shape)
        print('this is yben.shape:',np.array(yben).shape)
        # 返回
        return (xmal, ymal), (xben, yben)

    # epochs=500, batch_size=64
    def train(self, epochs, batch_size=32, is_first=1):

        # Load and Split the dataset
        (xmal, ymal), (xben, yben) = self.load_data()
        # 将恶意软件样本按照测试样本占20%进行分割
        xtrain_mal, xtest_mal, ytrain_mal, ytest_mal = train_test_split(xmal, ymal, test_size=0.20)
        # 将良性软件样本按照测试样本占20%进行分割
        xtrain_ben, xtest_ben, ytrain_ben, ytest_ben = train_test_split(xben, yben, test_size=0.20)
        # 采用两种方式进行训练集和测试集的分割：第一种是将80%的数据集作为训练集，其余作为测试集，并且black detector以及substitude detector共用这部分训练集；另一种是将80%的训练集进一步对半分，分别作为black detector以及substitude detector的训练集。
        # 是否使用相同的数据集 same_train_data等于1则使用第一种分割方法，等于0则使用第二种分割方法
        if self.same_train_data:
            # bl_xtrain_mal：训练使用的恶意样本 bl_ytrain_mal：恶意标签  bl_xtrain_ben：良性样本 bl_ytrain_ben：良性标签
            bl_xtrain_mal, bl_ytrain_mal, bl_xtrain_ben, bl_ytrain_ben = xtrain_mal, ytrain_mal, xtrain_ben, ytrain_ben
        else:
            xtrain_mal, bl_xtrain_mal, ytrain_mal, bl_ytrain_mal = train_test_split(xtrain_mal, ytrain_mal, test_size=0.50)
            xtrain_ben, bl_xtrain_ben, ytrain_ben, bl_ytrain_ben = train_test_split(xtrain_ben, ytrain_ben, test_size=0.50)

        # if is_first is Ture, Train the blackbox_detctor
        # 训练黑盒检测器
        if is_first:
            self.blackbox_detector.fit(np.concatenate([xmal, xben]),
                                       np.concatenate([ymal, yben]))

        # ytrain_ben_blackbox：经过黑盒检测器检测得到的良性样本的标签
        ytrain_ben_blackbox = self.blackbox_detector.predict(bl_xtrain_ben)
        # 原始训练的TPR 未经黑盒检测器
        Original_Train_TPR = self.blackbox_detector.score(bl_xtrain_mal, bl_ytrain_mal)
        # 原始测试的TPR
        Original_Test_TPR = self.blackbox_detector.score(xtest_mal, ytest_mal)
        Train_TPR, Test_TPR = [Original_Train_TPR], [Original_Test_TPR]
        best_TPR = 1.0
        for epoch in range(epochs):
            # batch_size=64
            for step in range(xtrain_mal.shape[0] // batch_size):
                # ---------------------
                #  Train substitute_detector
                # ---------------------

                # Select a random batch of malware examples
                idx = np.random.randint(0, xtrain_mal.shape[0], batch_size)
                xmal_batch = xtrain_mal[idx]
                noise = np.random.uniform(0, 1, (batch_size, self.z_dims))
                idx = np.random.randint(0, xmal_batch.shape[0], batch_size)
                # 原始良性数据
                xben_batch = xtrain_ben[idx]
                # 经过黑盒检测器检测得到的良性样本的标签
                yben_batch = ytrain_ben_blackbox[idx]

                # Generate a batch of new malware examples
                # 生成对抗样本
                gen_examples = self.generator.predict([xmal_batch, noise])
                print(gen_examples)
                # 是恶意样本的概率
                ymal_batch = self.blackbox_detector.predict(np.ones(gen_examples.shape)*(gen_examples > 0.5))

                # Train the substitute_detector
                # gen_examples：对抗样本 ymal_batch：恶意样本的概率
                d_loss_real = self.substitute_detector.train_on_batch(gen_examples, ymal_batch)
                d_loss_fake = self.substitute_detector.train_on_batch(xben_batch, yben_batch)
                # 损失
                d_loss = 0.5 * np.add(d_loss_real, d_loss_fake)

                # ---------------------
                #  Train Generator
                # ---------------------

                idx = np.random.randint(0, xtrain_mal.shape[0], batch_size)
                # 恶意样本
                xmal_batch = xtrain_mal[idx]
                noise = np.random.uniform(0, 1, (batch_size, self.z_dims))

                # Train the generator
                g_loss = self.combined.train_on_batch([xmal_batch, noise], np.zeros((batch_size, 1)))

            # Compute Train TPR
            noise = np.random.uniform(0, 1, (xtrain_mal.shape[0], self.z_dims))
            # xtrain_mal（训练使用的恶意数据）经过生成器之后得到的对抗样本
            gen_examples = self.generator.predict([xtrain_mal, noise])
            TPR = self.blackbox_detector.score(np.ones(gen_examples.shape) * (gen_examples > 0.5), ytrain_mal)
            Train_TPR.append(TPR)

            # Compute Test TPR
            noise = np.random.uniform(0, 1, (xtest_mal.shape[0], self.z_dims))
            gen_examples = self.generator.predict([xtest_mal, noise])
            TPR = self.blackbox_detector.score(np.ones(gen_examples.shape) * (gen_examples > 0.5), ytest_mal)
            Test_TPR.append(TPR)

            # Save best model
            if TPR < best_TPR:
                self.combined.save_weights('saves/malgan.h5')
                best_TPR = TPR

            # Plot the progress
            if is_first:
                print("%d [D loss: %f, acc.: %.2f%%] [G loss: %f]" % (epoch, d_loss[0], 100*d_loss[1], g_loss))

        flag = ['DiffTrainData', 'SameTrainData']
        print('\n\n---{0} {1}'.format(self.blackbox, flag[self.same_train_data]))
        print('\nOriginal_Train_TPR: {0}, Adver_Train_TPR: {1}'.format(Original_Train_TPR, Train_TPR[-1]))
        print('\nOriginal_Test_TPR: {0}, Adver_Test_TPR: {1}'.format(Original_Test_TPR, Test_TPR[-1]))

        # Plot TPR
        plt.figure()
        plt.plot(range(len(Train_TPR)), Train_TPR, c='r', label='Training Set', linewidth=2)
        plt.plot(range(len(Test_TPR)), Test_TPR, c='g', linestyle='--', label='Validation Set', linewidth=2)
        plt.xlabel('Epoch')
        plt.ylabel('TPR')
        plt.legend()
        plt.savefig('saves/Epoch_TPR({0}, {1}).png'.format(self.blackbox, flag[self.same_train_data]))
        plt.show()

    def retrain_blackbox_detector(self):
        (xmal, ymal), (xben, yben) = self.load_data()
        xtrain_mal, xtest_mal, ytrain_mal, ytest_mal = train_test_split(xmal, ymal, test_size=0.20)
        xtrain_ben, xtest_ben, ytrain_ben, ytest_ben = train_test_split(xben, yben, test_size=0.20)
        # Generate Train Adversarial Examples
        noise = np.random.uniform(0, 1, (xtrain_mal.shape[0], self.z_dims))
        gen_examples = self.generator.predict([xtrain_mal, noise])
        gen_examples = np.ones(gen_examples.shape) * (gen_examples > 0.5)
        self.blackbox_detector.fit(np.concatenate([xtrain_mal, xtrain_ben, gen_examples]),
                                   np.concatenate([ytrain_mal, ytrain_ben, ytrain_mal]))

        # Compute Train TPR
        train_TPR = self.blackbox_detector.score(gen_examples, ytrain_mal)

        # Compute Test TPR
        noise = np.random.uniform(0, 1, (xtest_mal.shape[0], self.z_dims))
        gen_examples = self.generator.predict([xtest_mal, noise])
        gen_examples = np.ones(gen_examples.shape) * (gen_examples > 0.5)
        test_TPR = self.blackbox_detector.score(gen_examples, ytest_mal)
        print('\n---TPR after the black-box detector is retrained(Before Retraining MalGAN).')
        print('\nTrain_TPR: {0}, Test_TPR: {1}'.format(train_TPR, test_TPR))

if __name__ == '__main__':
    malgan = MalGAN(blackbox='VOTE')
    malgan.train(epochs=50, batch_size=32)
    malgan.retrain_blackbox_detector()
    malgan.train(epochs=100, batch_size=64, is_first=False)